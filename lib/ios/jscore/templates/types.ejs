/**
 * @preserve This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 * 
 * WARNING: this file is generated and will be overwritten
 * It was generated from <%=gen.filename%> on <%=new Date%>
 */
<% gen.imports.forEach(function(i){ -%>
<%- i %>
<% }) -%>


@interface JSValue(SEL)
+(JSValue*)valueWithSelector:(SEL)selector inContext:(JSContext*)context;
-(SEL)toSelector;
@end


@protocol <%=gen.prefix%>CallbackExport <JSExport>
-(id)selector;
@end

@interface <%=gen.prefix%>Callback : NSObject<<%=gen.prefix%>CallbackExport>
@property (nonatomic, strong, readwrite) JSManagedValue *callback;
@end

@implementation <%=gen.prefix%>Callback

-(void)dealloc {
	NSLog(@"dealloc %@",self);
}

-(void)action:(id)sender {
	NSLog(@"callback action happened %@",sender);
}

-(id)selector {
	return [JSValue valueWithSelector:@selector(action:) inContext:[JSContext currentContext]];
}

@end

@interface Foo : NSObject
-(void)action:(id)sender;
@end


@implementation Foo
-(void)dealloc {
	NSLog(@"FOo dealoc");
}
-(void)action:(id)sender {
	NSLog(@"FOOOOOOO!");
}
@end


<%- gen.code %>


