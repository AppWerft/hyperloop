/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */

// WARNING: this file is generated and will be overwritten
// Generated on <%=new Date%>

/**
 * JSC implementation for <%=entry.framework%>/<%=entry.name%>
 */

<% imports.forEach(function(i) { -%>
@import <%=i%>;
<% }) -%>
<% autoincludes.forEach(function(i) { -%>
#import <<%=i%>>
<% }) -%>

JSClassDefinition ClassDefinitionFor<%=entry.name%>;
JSClassRef <%=entry.name%>ClassDef;
JSObjectRef MakeObjectFor<%=entry.name%> (JSContextRef ctx, <%=entry.name%> *instance);

// define any externs referenced in this implementation
<% externs.forEach(function(extern) { -%>
extern JSClassRef <%=extern%>ClassDef;
<% }) %>

typedef JSObjectRef (*ObjectMaker)(JSContextRef,id);
typedef JSObjectRef (*ClassMaker)(JSContextRef,Class);
extern void RegisterJSObjectMakerForType(NSString*, ObjectMaker);
extern void RegisterJSClassMakerForType(NSString*, ClassMaker);

extern JSObjectRef MakeInstanceFor<%=entry.name%>Class (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception);

// types we use
<% makers.forEach(function(name) { -%>
extern JSObjectRef MakeObjectFor<%=name%>(JSContextRef, <%=name%>*);
<% }) %>
