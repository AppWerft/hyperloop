<% if (!skipCopyright) { -%>
/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
<% } -%>

<% if (addImports) { -%>
#import <hyperloop.h>
@import Foundation;
@import JavaScriptCore;
@import <%=protocolObject.framework%>;
<% } -%>

/**
 * convert JSValueRef to <%=typeName%>
 */
id<<%=typeName %>> HyperloopJSValueRefTo<%=typeName %> (JSContextRef ctx, JSValueRef <%=variableName%>, JSValueRef *exception)
{
	id<<%=typeName %>> <%=resultName%> = nil;

	if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$objectRef = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$objectRef,JSPrivateObjectTypeID)) 
		{
			id <%=variableName%>$id = HyperloopGetPrivateObjectAsID(<%=variableName%>$objectRef);	
			if ([<%=variableName%>$id conformsToProtocol:@protocol(<%=typeName %>)])
			{
				<%=resultName%> = (id<<%=typeName%>>) <%=variableName%>$id;
			}
			else 
			{
				NSString *message = [NSString stringWithFormat:@"incorrect argument type. expected class that implements protocol: <%=typeName%>, but received: %@", [<%=variableName%>$id class]];
				HyperloopMakeException(ctx, [message UTF8String], exception);
				return nil;
			}
		}
	}
	else if (JSValueIsUndefined(ctx,<%=variableName%>) || JSValueIsNull(ctx,<%=variableName%>))
	{
		return nil;
	}

	NSString *message = [NSString stringWithFormat:@"incorrect argument type. expected: <%=typeName%>, but received something else."];
	HyperloopMakeException(ctx, [message UTF8String], exception);
	return nil;
}
