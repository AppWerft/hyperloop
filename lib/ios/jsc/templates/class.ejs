/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */

// WARNING: this file is generated and will be overwritten
// Generated on <%=new Date%>

<% imports.forEach(function(i){ -%>
@import <%=i%>;
<% }) -%>
#import <hyperloop.h>

// types we use
<% makers.forEach(function(name) { 
	m = metadata.classes[name] || metadata.protocols[name],
	p = m.metatype=='protocol';
-%>
<% if(p){ -%>
extern JSObjectRef MakeObjectFor<%=name%>(JSContextRef, id<<%=name%>>);
<% } else { -%>
extern JSObjectRef MakeObjectFor<%=name%>(JSContextRef, <%=name%>*);
<% } -%>
<% }) %>

JSClassRef CreateClassFor<%=name%> ();
JSClassRef CreateClassFor<%=name%>Constructor ();
JSObjectRef MakeObjectFor<%=name%>Constructor(JSContextRef, JSObjectRef);

JSClassDefinition ClassDefinitionFor<%=name%>Constructor;
JSClassDefinition ClassDefinitionFor<%=name%>;
JSClassRef <%=name%>ClassDefForConstructor;
JSClassRef <%=name%>ClassDef;

typedef struct <%=name%>Private
{
    JSGlobalContextRef context;
    JSObjectRef callback;
} <%=name%>Private;

@interface <%=name%> : <%=extendsName%> <%if (interfaces){%><<%=interfaces.join(',')%>><%}%>
{
    JSGlobalContextRef ctx;
    JSObjectRef source;
    JSObjectRef thisObject;
}
-(id)initWithInstance:(JSObjectRef)src context:(JSGlobalContextRef)context thisObject:(JSObjectRef)thisObject;
@end

@implementation <%=name%>

-(id)initWithInstance:(JSObjectRef)src context:(JSGlobalContextRef)context thisObject:(JSObjectRef)to
{
	if (self = [super init])
	{
        ctx = context;
        source = src;
        thisObject = to;
        JSValueProtect(ctx,source);
        JSValueProtect(ctx,thisObject);
        JSGlobalContextRetain(ctx);
	}
	return self;
}

-(void)cleanup 
{
    if (source!=NULL)
    {
        JSValueUnprotect(ctx,source);
        source = NULL;
    }
    if (thisObject!=NULL)
    {
        JSValueUnprotect(ctx,thisObject);
        thisObject = NULL;
    }
    if (ctx!=NULL) 
    {
        JSGlobalContextRelease(ctx);
        ctx = NULL;
    }
}

-(void)dealloc
{
    [self cleanup];
    [super dealloc];
}

<% methods.forEach(function(method) { -%>

<%-method.signature%>
{
	<%- method.body %>
}

<% }) -%>

@end

/**
 * called to make a native object for <%=name%>. this method must be called instead of 
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and 
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%=name%> (JSContextRef ctx, <%=name%> *instance) 
{
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%=name%>(), (void*)HyperloopMakePrivateObjectForID(instance));
    JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%=name%>Constructor(), 0);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);
    
    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%=name%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    return object;
}


/**
 * called to make an instance of the <%=name%> class using the proper
 * constructor and prototype chain. this is called when you call
 * <%=name%>()
 */
JSValueRef MakeInstanceFromFunctionFor<%=name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    <%=name%>Private *private = JSObjectGetPrivate(function);
    if (private==NULL) 
    {
        NSLog(@"[ERROR] MakeInstanceFromFunctionFor<%=name%> invoked with no private object");
        return JSValueMakeUndefined(ctx);
    }
    JSObjectRef globalObject = JSContextGetGlobalObject(private->context);
    <%=name%> *instance = [[<%=name%> alloc] initWithInstance:private->callback context:private->context thisObject:globalObject];
    return MakeObjectFor<%=name%>(ctx,instance);
}

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%=name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    <%-name%> *<%=:name | downcase%> = (<%=name%>*)HyperloopGetPrivateObjectAsID(object);
    return HyperloopToString(ctx, <%=:name | downcase%>);
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%=name%>Constructor (JSObjectRef object)
{
    <%=name%>Private *private = JSObjectGetPrivate(object);
    if (private!=NULL) 
    {
        JSValueUnprotect(private->context,private->callback);
        JSGlobalContextRelease(private->context);
        private->context = NULL;
        private->callback = NULL;
        free(private);
        private=NULL;
    }
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%=name%> (JSObjectRef object)
{
	HyperloopDestroyPrivateObject(object);
}

/**
 * type conversion from native type to JS type
 */
JSValueRef JSTypeConvertorFor<%=name%>(JSContextRef ctx, JSObjectRef object, JSType type, JSValueRef* exception)
{
    <%-name%> *<%=:name | downcase%> = (<%=name%>*)HyperloopGetPrivateObjectAsID(object);
    if (type == kJSTypeString) 
    {
        NSString *description = [<%=:name | downcase%> description];
        JSStringRef descriptionStr = JSStringCreateWithUTF8CString([description UTF8String]);
        JSValueRef result = JSValueMakeString(ctx, descriptionStr);
        JSStringRelease(descriptionStr);
        return result;
    }
    else 
    {
        double value = 0;
        if ([<%=:name | downcase%> isKindOfClass:[NSNumber class]]) 
        {
            value = [((NSNumber*)<%=:name | downcase%>) doubleValue];
        }
        else
        {
            NSString *description = [<%=:name | downcase%> description];
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            value = [[numberFormatter numberFromString:description] doubleValue];
            [numberFormatter release];
        }
        return JSValueMakeNumber(ctx, value);
    }
    return NULL;
}

/**
 * called to determine if an object is of a subclass
 */
bool IsInstanceFor<%=name%> (JSContextRef ctx, JSObjectRef constructor, JSValueRef possibleInstance, JSValueRef* exception)
{
    if (HyperloopPrivateObjectIsType(constructor,JSPrivateObjectTypeID) && 
        HyperloopPrivateObjectIsType((JSObjectRef)possibleInstance,JSPrivateObjectTypeID))
    {
        id constructorObj = HyperloopGetPrivateObjectAsID(constructor);
        id possibleSubclassObj = HyperloopGetPrivateObjectAsID((JSObjectRef)possibleInstance);
        
        return [possibleSubclassObj isKindOfClass:[constructorObj class]];
    }
    return false;
}


static JSStaticValue StaticValueArrayFor<%=name%> [] = {
    { 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%=name%> [] = {
    { "toString", toStringFor<%=name%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
    { 0, 0, 0 }
};

/**
 * called to get the JSClassRef for <%=name%> class
 */
JSClassRef CreateClassFor<%=name%> ()
{
    static bool init;
    if (!init) 
    {
        init = true;
    
        ClassDefinitionFor<%=name%> = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%=name%>.staticValues = StaticValueArrayFor<%=name%>;
        ClassDefinitionFor<%=name%>.finalize = FinalizerFor<%=name%>;
        ClassDefinitionFor<%=name%>.convertToType = JSTypeConvertorFor<%=name%>;
        ClassDefinitionFor<%=name%>.className = "<%=name%>";
        ClassDefinitionFor<%=name%>.hasInstance = IsInstanceFor<%=name%>;
    	<%=name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%=name%>);
        JSClassRetain(<%=name%>ClassDef);
    }
    return <%=name%>ClassDef;
}

/**
 * called to get the JSClassRef for <%=name%> constructor class
 */
JSClassRef CreateClassFor<%=name%>Constructor ()
{
    static bool init;
    if (!init) 
    {
        init = true;
    
        ClassDefinitionFor<%=name%>Constructor = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%=name%>Constructor.className = "<%=name%>Constructor";
        ClassDefinitionFor<%=name%>Constructor.finalize = FinalizerFor<%=name%>Constructor;
        ClassDefinitionFor<%=name%>Constructor.callAsFunction = MakeInstanceFromFunctionFor<%=name%>;
		<%=name%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%=name%>Constructor);

        JSClassRetain(<%=name%>ClassDefForConstructor);
    }
    return <%=name%>ClassDefForConstructor;
}

JSObjectRef MakeObjectFor<%=name%>Constructor (JSContextRef ctx, JSObjectRef functionBody) 
{
    <%=name%>Private *private = malloc(sizeof(<%=name%>Private));
    private->context = (JSGlobalContextRef)ctx;
    private->callback = functionBody;
    JSClassRef classRef = CreateClassFor<%=name%>Constructor();
    JSObjectRef object = JSObjectMake(ctx, classRef, (void*)private);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%=name%>Constructor");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);
    
    JSObjectRef plainObject = JSObjectMake(ctx,0,0);
    JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
    JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(prototypeProperty);
    
    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);
    
    return object;
}