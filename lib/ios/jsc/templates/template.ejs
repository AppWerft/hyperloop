/**
 * @preserve This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 *
 * WARNING: this file is generated and will be overwritten
 * It was generated from <%=gen.filename%> on <%=new Date%>
 */
@import JavaScriptCore;
#import <hyperloop.h>
<% gen.imports.forEach(function(i) { -%>
@import <%=i%>;
<% }) -%>

// implementations define this
extern NSData* HyperloopDecompressBuffer (NSData*);

<% externs.forEach(function(e) { -%>
<%- e -%>;

<% }) -%>


@interface <%=gen.prefix%><%=gen.name%> : NSObject<HyperloopModule>
+(JSValueRef)load:(JSContextRef)context;
@end

@implementation <%=gen.prefix%><%=gen.name%>

+(NSData*)buffer
{
	static UInt8 data[] = {
		<%=gen.jsBuffer %>
	};
	return [NSData dataWithBytes:((void*)data) length:<%=gen.jsBuffer.length%>];
}

+(JSValueRef)load:(JSContextRef)ctx
{
	@autoreleasepool
	{
		JSObjectRef object = JSContextGetGlobalObject(ctx);

<%if (gen.requires_JSBuffer) { -%>
		// register our JSBuffer
		RegisterJSBuffer(ctx, object);
<%} -%>

		<%-indentify(code,'		') %>

		NSData *compressedBuf = [<%=gen.prefix%><%=gen.name%> buffer];
		NSString *jscode;
		if ([compressedBuf length]==1)
		{
			// if empty, just evaluate empty JS string
			jscode = @"";
		}
		else
		{
			NSData *buffer = HyperloopDecompressBuffer(compressedBuf);
			jscode = [[[NSString alloc] initWithData:buffer encoding:NSUTF8StringEncoding] autorelease];
		}

	    NSString *wrapper = [NSString stringWithFormat:@"var module = {}, exports = {}; module.id = '%s'; module.exports = exports; %@; return module.exports;","<%=gen.name%>",jscode];

	    JSStringRef fnName = JSStringCreateWithUTF8CString("require");
	    JSStringRef body = JSStringCreateWithUTF8CString([wrapper UTF8String]);
	    JSObjectRef requireFn = JSObjectMakeFunction(ctx, fnName, 0, 0, body, NULL, 0, 0);
	    
	    // invoke the common JS wrapper
	    JSValueRef result = JSObjectCallAsFunction(ctx, requireFn, object, 0, NULL, NULL);

		return result;
	}
}

@end
