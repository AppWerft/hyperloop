/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */

// WARNING: this file is generated and will be overwritten
// Generated on <%=new Date%>

#define UNUSED(x) (void)(x)

/**
 * JSC implementation for <%=entry.framework%>/<%=entry.name%>
 */
<%
    var readonly_properties = {},
        readwrite_properties = {},
        methods = {},
        properties_to_exclude = exclusions.properties,
        methods_to_exclude = exclusions.methods;

    copyProperties(false,entry.properties,properties_to_exclude,methods_to_exclude,readonly_properties,readwrite_properties,imports,version,entry);
    copyMethods(false,entry.methods,methods,readonly_properties,readwrite_properties,methods_to_exclude,imports,version,entry);

    var superClass = metadata.classes[entry.superClass];
    if (superClass && externs.indexOf(entry.superClass)===-1) {
        externs.push(entry.superClass+'Class');
    }

    entry.protocols && entry.protocols.forEach(function(p){
        var pe = metadata.protocols[p];
        if (pe.framework && imports.indexOf(pe.framework)===-1) {
            imports.push(pe.framework);
        }
        copyMethods(false,pe.methods,methods,readonly_properties,readwrite_properties,methods_to_exclude,imports,version,entry);
        copyProperties(false,pe.properties,properties_to_exclude,methods_to_exclude,readonly_properties,readwrite_properties,imports,version,entry);
    });

    var instanceName = entry.name.replace(/Class$/,''),
        varname = entry.name.toLowerCase();

-%>
#import "<%=entry.name%>.h"

static JSClassRef ctorClassRef;

<% Object.keys(methods).sort().forEach(function(m) { 
    var ma = methods[m];
-%>
JSValueRef <%=m%>For<%=entry.name%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
<% ma.forEach(function(method) { -%>
    // <%-method.selector%>
    if (argumentCount == <%=method.args.length%>) 
    {
        <%-generateInvocation(metadata,externs,makers,entry,method,instanceName,m,'        ',true)%>
    }
<% });-%>
    <%-makeException('    ','invalid number of arguments passed') %>
}

<% });-%>

static JSStaticFunction StaticFunctionArrayFor<%=entry.name%> [] = {
<% Object.keys(methods).sort().forEach(function(m) {  -%>
    { "<%=m%>", <%=m%>For<%=entry.name%>, kJSPropertyAttributeNone },
<% }) -%>
    { 0, 0, 0 }
};

/**
 * called when a new JS object is created for this class
 */
void InitializerFor<%=entry.name%> (JSContextRef ctx, JSObjectRef object)
{
    Class class = (Class)JSObjectGetPrivate(object);
    [class retain];
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%=entry.name%> (JSObjectRef object)
{
    Class class = (Class)JSObjectGetPrivate(object);
    [class release];
}

/**
 * called to make an instance of the <%=instanceName%> class using the proper
 * constructor and prototype chain.  this method maps to when you call something like
 * new <%=instanceName%>() in JS.  this method only calls the default constructor in Objective-C.
 * for more fine grained control, you can call alloc() and init() specifically.
 */
JSObjectRef MakeInstanceFor<%=entry.name%> (JSContextRef ctx, JSObjectRef constructor, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
<% if (hasMethodPrototype(metadata,entry,'init')) { %>
    <%=instanceName%> *instance = [[<%=instanceName%> alloc] init];
<% } else { %>
    <%=instanceName%> *instance = [<%=instanceName%> alloc];
<% } %>
    JSObjectRef object = MakeObjectFor<%=instanceName%>(ctx,instance);
    [instance release];
    return object;
}

/**
 * called to get the JSClassRef for the <%=entry.name%> class
 */
JSClassRef CreateClassFor<%=entry.name%> ()
{
    static bool init;
    if (!init) 
    {
        init = true;
    
        JSClassDefinition ctorClassDefRef = kJSClassDefinitionEmpty;
        ctorClassDefRef.className = "<%=entry.name%>Constructor";
        ctorClassDefRef.callAsConstructor = MakeInstanceFor<%=entry.name%>;
        ctorClassRef = JSClassCreate(&ctorClassDefRef);

        ClassDefinitionFor<%=entry.name%> = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%=entry.name%>.staticFunctions = StaticFunctionArrayFor<%=entry.name%>;
        ClassDefinitionFor<%=entry.name%>.initialize = InitializerFor<%=entry.name%>;
        ClassDefinitionFor<%=entry.name%>.finalize = FinalizerFor<%=entry.name%>;
        ClassDefinitionFor<%=entry.name%>.className = "<%=entry.name%>";
        ClassDefinitionFor<%=entry.name%>.callAsConstructor = MakeInstanceFor<%=entry.name%>;
    <% if (entry.superClass) { -%>
    ClassDefinitionFor<%=entry.name%>.parentClass = <%=entry.superClass%>ClassDef;
    <% } -%>
    <%=entry.name%>ClassDef = JSClassCreate(&ClassDefinitionFor<%=entry.name%>);

        JSClassRetain(<%=entry.name%>ClassDef);

        // register the class definition so we can look it up by name
        RegisterJSClassMakerForType(@"<%=entry.name%>",MakeObjectFor<%=entry.name%>);
    }
    return <%=entry.name%>ClassDef;
}

/**
 * make an object for the <%=entry.name%> class and setup the right prototype chain
 * an constructor
 */
JSObjectRef MakeObjectFor<%=entry.name%> (JSContextRef ctx, Class instance) 
{
    JSClassRef classRef = CreateClassFor<%=entry.name%>();
    JSObjectRef object = JSObjectMake(ctx, classRef, instance);

    JSObjectRef value = JSObjectMake(ctx,ctorClassRef,0);

<% if (entry.superClass){ 
        makers.push(entry.superClass+'Class');
    %>
    JSValueRef prototype = JSObjectGetPrototype(ctx, object);
    JSObjectRef prototypeRef = JSValueToObject(ctx, prototype, 0);
    JSObjectRef newPrototype = MakeObjectFor<%=entry.superClass%>Class(ctx,(void*)instance);
    JSStringRef protoProperty = JSStringCreateWithUTF8CString("__proto__");
    JSValueRef newP = JSObjectGetProperty(ctx, newPrototype, protoProperty, 0);
    JSObjectSetPrototype(ctx, prototypeRef, newP);
    JSStringRelease(protoProperty);
<% } %>

    JSStringRef property = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, object, property, value, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(property);

    return object;
}
