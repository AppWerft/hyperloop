/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
#import "js_custom_<%=className%>.h"

/**
 * JSC implementation for <%=className%>
 */

// export typdefs we use
<% typedefs.forEach(function(t) { -%>
<%- t %>
<% }) -%>

// export methods we use
<% externs.forEach(function(e){ -%>
<%- e %>
<% }) -%>

JSClassRef CreateClassFor<%=className%> ();
JSClassRef CreateClassFor<%=className%>Constructor ();
JSObjectRef MakeObjectFor<%=className%>Constructor(JSContextRef, JSObjectRef);

JSClassDefinition ClassDefinitionFor<%=className%>Constructor;
JSClassDefinition ClassDefinitionFor<%=className%>;
JSClassRef <%=className%>ClassDefForConstructor;
JSClassRef <%=className%>ClassDef;

typedef struct <%=className%>Private
{
    JSGlobalContextRef context;
    JSObjectRef callback;
} <%=className%>Private;



@implementation <%=className%>

-(id)initWithInstance:(JSObjectRef)src context:(JSGlobalContextRef)context thisObject:(JSObjectRef)to
{
	if (self = [super init])
	{
        ctx = context;
        source = src;
        thisObject = to;
        JSValueProtect(ctx,source);
        JSValueProtect(ctx,thisObject);
        JSGlobalContextRetain(ctx);
	}
	return self;
}

-(void)cleanup
{
    if (source!=NULL)
    {
        JSValueUnprotect(ctx,source);
        source = NULL;
    }
    if (thisObject!=NULL)
    {
        JSValueUnprotect(ctx,thisObject);
        thisObject = NULL;
    }
    if (ctx!=NULL)
    {
        JSGlobalContextRelease(ctx);
        ctx = NULL;
    }
}

-(void)dealloc
{
    [self cleanup];
    [super dealloc];
}

<% methods.forEach(function(o){ -%>
<%-o.selector %>
{
	<%-indentify(o.code,'	') %>
}

<% }) -%>

@end


/**
 * called to make a native object for <%-className%>. this method must be called instead of
 * normal JSObjectMake in JavaScriptCore so that the correct prototype chain and
 * constructor will be setup.
 */
JSObjectRef MakeObjectFor<%-className%> (JSContextRef ctx, <%-className%> *instance)
{
    JSObjectRef object = JSObjectMake(ctx, CreateClassFor<%-className%>(), (void*)HyperloopMakePrivateObjectForID((JSGlobalContextRef)ctx,instance));
    JSObjectRef value = JSObjectMake(ctx, CreateClassFor<%-className%>Constructor(), 0);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, object, cproperty, value, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-className%>");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, value, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    return object;
}


/**
 * called to make an instance of the <%-className%> class using the proper
 * constructor and prototype chain. this is called when you call
 * <%-className%>()
 */
JSValueRef MakeInstanceFromFunctionFor<%-className%> (JSContextRef ctx, JSObjectRef function, JSObjectRef thisObject, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    <%-className%>Private *private = JSObjectGetPrivate(function);
    if (private==NULL)
    {
        NSLog(@"[ERROR] MakeInstanceFromFunctionFor<%-className%> invoked with no private object");
        return JSValueMakeUndefined(ctx);
    }
    JSObjectRef globalObject = JSContextGetGlobalObject(private->context);
    <%-className%> *instance = [[<%-className%> alloc] initWithInstance:private->callback context:private->context thisObject:globalObject];
    return MakeObjectFor<%-className%>(ctx,instance);
}

/**
 * generic conversion from native object representation to JS string
 */
JSValueRef toStringFor<%-className%> (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    <%-className%> *<%=:className | downcase%> = (<%-className%>*)HyperloopGetPrivateObjectAsID(object);
    return HyperloopToString(ctx, <%=:className | downcase%>);
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-className%>Constructor (JSObjectRef object)
{
    <%-className%>Private *private = JSObjectGetPrivate(object);
    if (private!=NULL)
    {
        JSValueUnprotect(private->context,private->callback);
        JSGlobalContextRelease(private->context);
        private->context = NULL;
        private->callback = NULL;
        free(private);
        private=NULL;
    }
}

/**
 * called when the JS object is ready to be garbage collected
 */
void FinalizerFor<%-className%> (JSObjectRef object)
{
	HyperloopDestroyPrivateObject(object);
}

/**
 * type conversion from native type to JS type
 */
JSValueRef JSTypeConvertorFor<%-className%>(JSContextRef ctx, JSObjectRef object, JSType type, JSValueRef* exception)
{
    <%-className%> *<%=:className | downcase%> = (<%-className%>*)HyperloopGetPrivateObjectAsID(object);
    if (type == kJSTypeString)
    {
        NSString *description = [<%=:className | downcase%> description];
        JSStringRef descriptionStr = JSStringCreateWithUTF8CString([description UTF8String]);
        JSValueRef result = JSValueMakeString(ctx, descriptionStr);
        JSStringRelease(descriptionStr);
        return result;
    }
    else
    {
        double value = 0;
        if ([<%=:className | downcase%> isKindOfClass:[NSNumber class]])
        {
            value = [((NSNumber*)<%=:className | downcase%>) doubleValue];
        }
        else
        {
            NSString *description = [<%=:className | downcase%> description];
            NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
            [numberFormatter setNumberStyle:NSNumberFormatterDecimalStyle];
            value = [[numberFormatter numberFromString:description] doubleValue];
            [numberFormatter release];
        }
        return JSValueMakeNumber(ctx, value);
    }
    return NULL;
}

/**
 * called to determine if an object is of a subclass
 */
bool IsInstanceFor<%-className%> (JSContextRef ctx, JSObjectRef constructor, JSValueRef possibleInstance, JSValueRef* exception)
{
    if (HyperloopPrivateObjectIsType(constructor,JSPrivateObjectTypeID) &&
        HyperloopPrivateObjectIsType((JSObjectRef)possibleInstance,JSPrivateObjectTypeID))
    {
        id constructorObj = HyperloopGetPrivateObjectAsID(constructor);
        id possibleSubclassObj = HyperloopGetPrivateObjectAsID((JSObjectRef)possibleInstance);

        return [possibleSubclassObj isKindOfClass:[constructorObj class]];
    }
    return false;
}


static JSStaticValue StaticValueArrayFor<%-className%> [] = {
    { 0, 0, 0, 0 }
};

static JSStaticFunction StaticFunctionArrayFor<%-className%> [] = {
    { "toString", toStringFor<%-className%>, kJSPropertyAttributeReadOnly | kJSPropertyAttributeDontEnum | kJSPropertyAttributeDontDelete },
    { 0, 0, 0 }
};

/**
 * called to get the JSClassRef for <%-className%> class
 */
JSClassRef CreateClassFor<%-className%> ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-className%> = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-className%>.staticValues = StaticValueArrayFor<%-className%>;
        ClassDefinitionFor<%-className%>.finalize = FinalizerFor<%-className%>;
        ClassDefinitionFor<%-className%>.convertToType = JSTypeConvertorFor<%-className%>;
        ClassDefinitionFor<%-className%>.className = "<%-className%>";
        ClassDefinitionFor<%-className%>.hasInstance = IsInstanceFor<%-className%>;
    	<%-className%>ClassDef = JSClassCreate(&ClassDefinitionFor<%-className%>);
        JSClassRetain(<%-className%>ClassDef);
    }
    return <%-className%>ClassDef;
}

/**
 * called to get the JSClassRef for <%-className%> constructor class
 */
JSClassRef CreateClassFor<%-className%>Constructor ()
{
    static bool init;
    if (!init)
    {
        init = true;

        ClassDefinitionFor<%-className%>Constructor = kJSClassDefinitionEmpty;
        ClassDefinitionFor<%-className%>Constructor.className = "<%-className%>Constructor";
        ClassDefinitionFor<%-className%>Constructor.finalize = FinalizerFor<%-className%>Constructor;
        ClassDefinitionFor<%-className%>Constructor.callAsFunction = MakeInstanceFromFunctionFor<%-className%>;
		<%-className%>ClassDefForConstructor = JSClassCreate(&ClassDefinitionFor<%-className%>Constructor);

        JSClassRetain(<%-className%>ClassDefForConstructor);
    }
    return <%-className%>ClassDefForConstructor;
}

JSObjectRef MakeObjectFor<%-className%>Constructor (JSContextRef ctx, JSObjectRef functionBody)
{
    <%=className%>Private *private = malloc(sizeof(<%-className%>Private));
    private->context = (JSGlobalContextRef)ctx;
    private->callback = functionBody;
    JSClassRef classRef = CreateClassFor<%-className%>Constructor();
    JSObjectRef object = JSObjectMake(ctx, classRef, (void*)private);

    JSStringRef nameProperty = JSStringCreateWithUTF8CString("name");
    JSStringRef valueProperty = JSStringCreateWithUTF8CString("<%-className%>Constructor");
    JSValueRef valueRef = JSValueMakeString(ctx, valueProperty);
    JSObjectSetProperty(ctx, object, nameProperty, valueRef, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(nameProperty);
    JSStringRelease(valueProperty);

    JSObjectRef plainObject = JSObjectMake(ctx,0,0);
    JSStringRef prototypeProperty = JSStringCreateWithUTF8CString("prototype");
    JSObjectSetProperty(ctx, object, prototypeProperty, plainObject, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(prototypeProperty);

    JSStringRef cproperty = JSStringCreateWithUTF8CString("constructor");
    JSObjectSetProperty(ctx, plainObject, cproperty, object, kJSPropertyAttributeDontEnum, 0);
    JSStringRelease(cproperty);

    return object;
}

JSValueRef MakeObjectFor<%-className%>ConstructorCallback (JSContextRef ctx, JSObjectRef function, JSObjectRef object, size_t argumentCount, const JSValueRef arguments[], JSValueRef* exception)
{
    JSGlobalContextRef globalCtx = HyperloopGetGlobalContext(ctx);
    JSObjectRef functionBody = JSValueToObject(ctx,arguments[0],exception);
    JSObjectRef constructor = MakeObjectFor<%-className%>Constructor(globalCtx,functionBody);
    JSStringRef property = JSStringCreateWithUTF8CString("<%-className%>");
    JSObjectRef globalObject = JSContextGetGlobalObject(globalCtx);
    // place the new constructor into the global context
    JSObjectSetProperty(globalCtx,globalObject,property,constructor,kJSPropertyAttributeReadOnly|kJSPropertyAttributeDontDelete,0);
    JSStringRelease(property);
    return JSValueMakeUndefined(ctx);
}
