<% if (!skipCopyright) { -%>
/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
<% } -%>

<% if (addImports) { -%>
#import <hyperloop.h>
@import Foundation;
@import JavaScriptCore;
@import <%=interfaceObject.framework%>;
<% } -%>

extern JSObjectRef MakeObjectFor<%=typeName%>(JSContextRef, <%=typeName%>*);

JSObjectRef Hyperloop<%=typeName%>ToJSValueRef (JSContextRef ctx, <%=typeName%>* object)
{
	return MakeObjectFor<%=typeName%>(ctx, object);
}

/**
 * convert JSValueRef to <%=typeName%>
 */
<%=typeName %>* HyperloopJSValueRefTo<%=typeName %> (JSContextRef ctx, JSValueRef <%=variableName%>, JSValueRef *exception)
{
	<%=typeName %> * <%=resultName%> = nil;

	if (JSValueIsObject(ctx,<%=variableName%>))
	{
		JSObjectRef <%=variableName%>$objectRef = JSValueToObject(ctx,<%=variableName%>,0);
		if (HyperloopPrivateObjectIsType(<%=variableName%>$objectRef,JSPrivateObjectTypeID)) 
		{
			id <%=variableName%>$id = HyperloopGetPrivateObjectAsID(<%=variableName%>$objectRef);	
			if ([<%=variableName%>$id isKindOfClass:[<%=typeName %> class]])
			{
				<%=resultName%> = (<%=typeName%> *) <%=variableName%>$id;
			}
			else 
			{
				NSString *message = [NSString stringWithFormat:@"incorrect argument type. expected: <%=typeName%>, but received: %@", [<%=variableName%>$id class]];
				HyperloopMakeException(ctx, [message UTF8String], exception);
				return nil;
			}
		}
		else
		{
<% if (typeName==='NSString') { -%>
			<%=resultName%> = HyperloopToNSString(ctx,<%=variableName%>);
<% } else if (typeName==='NSMutableString') { -%>
			<%=resultName%> = [[NSMutableString alloc] init];
			[<%=resultName%> setString:HyperloopToNSString(ctx,<%=variableName%>)];
			[<%=resultName%> autorelease];
<% } else { -%>
			NSString *message = [NSString stringWithFormat:@"incorrect argument type. expected: <%=typeName%>, but received an object of unknown type"];
			HyperloopMakeException(ctx, [message UTF8String], exception);
			return nil;
<% } -%>
		}
	}
	else if (JSValueIsUndefined(ctx,<%=variableName%>) || JSValueIsNull(ctx,<%=variableName%>))
	{
		<%=resultName%> = nil;
	}
<% if (typeName==='NSString') { -%>
	else if (JSValueIsString(ctx, <%=variableName%>))
	{
		<%=resultName%> = HyperloopToNSString(ctx, <%=variableName%>);
	}
	else if (JSValueIsNumber(ctx, <%=variableName%>))
	{
		double value = JSValueToNumber(ctx,<%=variableName%>,exception);
		<%=resultName%> = [[NSNumber numberWithDouble:value] stringValue];
	}
	else if (JSValueIsBoolean(ctx, <%=variableName%>))
	{
		bool value = JSValueToBoolean(ctx,<%=variableName%>);
		<%=resultName%> = [[NSNumber numberWithBool:value] stringValue];
	}
<% } -%>
<% if (typeName==='NSMutableString') { -%>
	else if (JSValueIsString(ctx, <%=variableName%>))
	{
		<%=resultName%> = [[NSMutableString alloc] init];
		[<%=resultName%> setString:HyperloopToNSString(ctx,<%=variableName%>)];
		[<%=resultName%> autorelease];
	}
	else if (JSValueIsNumber(ctx, <%=variableName%>))
	{
		double value = JSValueToNumber(ctx,<%=variableName%>,exception);
		<%=resultName%> = [[NSMutableString alloc] init];
		NSString *s = [[NSNumber numberWithDouble:value] stringValue];
		[<%=resultName%> setString:s];
		[<%=resultName%> autorelease];
	}
	else if (JSValueIsBoolean(ctx, <%=variableName%>))
	{
		bool value = JSValueToBoolean(ctx,<%=variableName%>);
		<%=resultName%> = [[NSMutableString alloc] init];
		NSString *s = [[NSNumber numberWithBool:value] stringValue];
		[<%=resultName%> setString:s];
		[<%=resultName%> autorelease];
	}
<% } -%>
<% if (typeName==='NSNumber') { -%>
	else if (JSValueIsString(ctx, <%=variableName%>))
	{
		NSString *str = HyperloopToNSString(ctx, <%=variableName%>);
		<%=resultName%> = [NSNumber numberWithDouble:[str doubleValue]];
	}
	else if (JSValueIsNumber(ctx, <%=variableName%>))
	{
		double value = JSValueToNumber(ctx,<%=variableName%>,exception);
		<%=resultName%> = [NSNumber numberWithDouble:value];
	}
	else if (JSValueIsBoolean(ctx, <%=variableName%>))
	{
		bool value = JSValueToBoolean(ctx,<%=variableName%>);
		<%=resultName%> = [NSNumber numberWithBool:value];
	}
<% } -%>
	else 
	{
		NSString *message = [NSString stringWithFormat:@"incorrect argument type. expected: <%=typeName%>, but received something else."];
		HyperloopMakeException(ctx, [message UTF8String], exception);
		return nil;
	}

	return <%=resultName%>;
}
