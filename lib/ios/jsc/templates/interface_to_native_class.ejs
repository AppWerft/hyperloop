/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
<%	imports.forEach(function(name) { -%>
@import <%=name%>;
<%  }) -%>
#import <hyperloop.h>
#import "<%=filename%>"

<%	interfaces.forEach(function(intf) { -%>
extern JSObjectRef MakeObjectFor<%=intf.mangledName%>(JSContextRef, <%=intf.type%>);
<%  }) -%>

// export methods we use
<% externs.forEach(function(e){ -%>
<%- e %>
<% }) -%>

<%- code %>

/**
 * This code will attempt to resolve an id (at runtime) into a specific class wrapper
 */

@implementation HyperloopConverters

<%	interfaces.forEach(function(intf) { 
	var name = intf.mangledName;
-%>

/**
 * convert <%=name%> to JSObjectRef
 */
+(JSValueRef)convert<%=name%>ToJSValueRef:(<%=name%>*)object withContext:(JSContextRef)ctx
{
    return MakeObjectFor<%=name%>(ctx, object);
}
<%  }) -%>

/**
 * called with an ID type to attempt to convert from a generic ID to a specific class
 * and return as a JSValueRef
 */
+(JSValueRef)convertIDToJSValueRef:(id)object withContext:(JSContextRef)ctx
{
<%	interfaces.forEach(function(e) { %>		
	if ([object isKindOfClass:[<%=e.simpleType%> class]])
	{
		return [HyperloopConverters convert<%=e.mangledName%>ToJSValueRef:object withContext:(void*)ctx];
	}

<%  }) -%>
	return NULL;
}

@end
