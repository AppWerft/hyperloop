/**
 * Copyright (c) 2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 * This generated code and related technologies are covered by patents
 * or patents pending by Appcelerator, Inc.
 */
@import Foundation;
@import JavaScriptCore;
<%	imports.forEach(function(name) { -%>
@import <%=name%>;
<%  }) -%>
#import <hyperloop.h>

<%	interfaces.forEach(function(name) { -%>
extern JSObjectRef MakeObjectFor<%=name%>(JSContextRef, id);
<%  }) -%>

/**
 * class type conversion routines
 */
@interface HyperloopConverters : NSObject

/**
 * called with an ID type to attempt to convert from a generic ID to a specific class
 * and return as a JSValueRef
 */
+(void*)convertIDToJSValueRef:(id)object withContext:(void*)ctx;

@end

@implementation HyperloopConverters

<%	interfaces.forEach(function(name) { -%>

/**
 * convert <%=name%> to JSObjectRef
 */
+(void*)convert<%=name%>ToJSValueRef:(<%=name%>*)object withContext:(void*)ctx_
{
	JSContextRef ctx = (JSContextRef)ctx_;
    return (void*)MakeObjectFor<%=name%>(ctx, object);
}
<%  }) -%>

/**
 * called with an ID type to attempt to convert from a generic ID to a specific class
 * and return as a JSValueRef
 */
+(void*)convertIDToJSValueRef:(id)object withContext:(void*)ctx;
{
	static NSMutableDictionary *classMap;
	if (classMap==nil) 
	{
<%	interfaces.forEach(function(name) { -%>		
		[classMap setObject:@"convert<%=name%>ToJSValueRef:withContext:" forKey:@"<%=name%>"];
<%  }) -%>
	}
	NSString *name = [classMap objectForKey:NSStringFromClass([object class])];
	if (name == nil)
	{
		return nil;
	}
	SEL selector = NSSelectorFromString(name);
	return (void*)[HyperloopConverters performSelector:selector withObject:object withObject:ctx];
}

@end
